import UIKit
/**
 136. 只出现一次的数字
 给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。

 说明：

 你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？

 示例 1:

 输入: [2,2,1]
 输出: 1
 示例 2:

 输入: [4,1,2,1,2]
 输出: 4
 */
// 遍历异或
/**
 异或
 如果a、b两个值不相同，则异或结果为1。如果a、b两个值相同，异或结果为0。
 二进制下用1表示真，0表示假 则异或的运算法则为：0⊕0=0，1⊕0=1，0⊕1=1，1⊕1=0（同为0，异为1），这些法则与加法是相同的，只是不带进位，所以异或常被认作不进位加法。
 
 若需要交换两个变量的值，除了通常使用的借用中间变量进行交换外，还可以利用异或，仅使用两个变量进行交换，如：
 void swap(int &a,int &b)
 {
     a=a^b;
     b=b^a;
     a=a^b;
 }
 这样就完成了a与b的交换。

 */
func singleNum(_ nums: [Int]) -> Int {
    var result = 0
    for num in nums {
        result = num^result
    }
    return result
}
